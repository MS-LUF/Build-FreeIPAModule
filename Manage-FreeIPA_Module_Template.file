#
# Created by: lucas.cueff[at]lucas-cueff.com
# Build by : %buildername%
# v%version% : 
# - %versioncomment%
#
# Released on: %builddate%
#
#'(c) 2018-2020 lucas-cueff.com - Distributed under Artistic Licence 2.0 (https://opensource.org/licenses/artistic-license-2.0).'

<#
	.SYNOPSIS 
	Powershell cmdlets to use FreeIPA JSONRPC admin web API

	.DESCRIPTION
    Manage-FreeIPA.psm1 module provides a commandline interface to manage your FreeIPA/IPA infrastructure from Powershell (Core/Classic - Windows/Linux/Mac Os).
    cmdlet alias respect the Powershell verb naming convention. All the parameters are based on the IPA Python cli embedded in the product.
    For more information on the FreeIPA API, please connect to thw web interface on your IPA Server : https://yourIPA.tld/ipa/ui/#/p/apibrowser/type=command
    Note : Don't forget to trust your IPA AC / ssl certificate locally before using the Powershell Module.
	
	.EXAMPLE
    C:\PS> import-module Manage-FreeIPA.psm1
    
    .EXTERNALHELP
    Manage-FreeIPA-help.xml
#>
Function Set-FreeIPAAPICredentials {
    [cmdletbinding()]
    Param (
      [parameter(Mandatory=$true)]
      [ValidateNotNullOrEmpty()]
          [SecureString]$AdminLogin,
      [parameter(Mandatory=$true)]
      [ValidateNotNullOrEmpty()]
          [SecureString]$AdminPassword,
      [parameter(Mandatory=$false)]
          [switch]$Remove,
      [parameter(Mandatory=$false)]
          [switch]$EncryptKeyInLocalFile,
      [parameter(Mandatory=$false)]
      [ValidateNotNullOrEmpty()]
          [string]$ConfigName,
      [parameter(Mandatory=$false)]
      [ValidateNotNullOrEmpty()]
          [securestring]$MasterPassword
    )
    if ($Remove.IsPresent) {
      $global:FreeIPAAPICredentials = $Null
    } Else {
        $global:FreeIPAAPICredentials = @{
            user = $AdminLogin
            password = $AdminPassword
        }
      If ($EncryptKeyInLocalFile.IsPresent) {
          If (!$MasterPassword -or !$AdminPassword) {
              Write-warning "Please provide a valid Master Password to protect the credential storage on disk and a valid credential"
              throw 'no credential or master password'
          } Else {
              $SaltBytes = New-Object byte[] 32
              $RNG = New-Object System.Security.Cryptography.RNGCryptoServiceProvider
              $RNG.GetBytes($SaltBytes)
              $Credentials = New-Object System.Management.Automation.PSCredential -ArgumentList 'user', $MasterPassword
              $Rfc2898Deriver = New-Object System.Security.Cryptography.Rfc2898DeriveBytes -ArgumentList $Credentials.GetNetworkCredential().Password, $SaltBytes
              $KeyBytes  = $Rfc2898Deriver.GetBytes(32)
              $EncryptedPass = $AdminPassword | ConvertFrom-SecureString -key $KeyBytes
              $EncryptedLogin = $AdminLogin | ConvertFrom-SecureString -key $KeyBytes
              $ObjConfigFreeIPA = @{
                  Salt = $SaltBytes
                  EncryptedAdminSecret = $EncryptedPass
                  EncryptedAdminAccount = $EncryptedLogin
              }
              $FolderName = 'Manage-FreeIPA'
              if ($ConfigName) {
                  $ConfigName = "Manage-FreeIPA-$($ConfigName).xml"
              } else {
                  $ConfigName = 'Manage-FreeIPA.xml'
              }
              if (!$home -and $env:userprofile) {
				  $global:home = $env:userprofile
			  }
              if (!(Test-Path -Path "$($global:home)\$FolderName")) {
                  New-Item -ItemType directory -Path "$($global:home)\$FolderName" | Out-Null
              }
              if (test-path "$($global:home)\$FolderName\$ConfigName") {
                  Remove-item -Path "$($global:home)\$FolderName\$ConfigName" -Force | out-null
              }
              $ObjConfigFreeIPA | Export-Clixml "$($global:home)\$FolderName\$ConfigName"
          }
      }
    }
  }
Function Import-FreeIPAAPICrendentials {
      [CmdletBinding()]
      Param(
          [parameter(Mandatory=$false,ValueFromPipelineByPropertyName=$true)]
          [ValidateNotNullOrEmpty()]
            [string]$ConfigName,
          [Parameter(Mandatory=$true)]
          [ValidateNotNullOrEmpty()]
            [securestring]$MasterPassword
      )
      process {
          $FolderName = 'Manage-FreeIPA'
          if ($ConfigName) {
            $ConfigName = "Manage-FreeIPA-$($ConfigName).xml"
          } else {
            $ConfigName = 'Manage-FreeIPA.xml'
          }
          if (!$home -and $env:userprofile) {
            $global:home = $env:userprofile
          }
          if (!(Test-Path "$($global:home)\$($FolderName)\$($ConfigName)")){
              Write-warning 'Configuration file has not been set, Set-FreeIPAAPICredentials to configure the credentials.'
              throw 'error config file not found'
          }
          $ObjConfigFreeIPA = Import-Clixml "$($global:home)\$($FolderName)\$($ConfigName)"
          $Credentials = New-Object System.Management.Automation.PSCredential -ArgumentList 'user', $MasterPassword
          try {
              $Rfc2898Deriver = New-Object System.Security.Cryptography.Rfc2898DeriveBytes -ArgumentList $Credentials.GetNetworkCredential().Password, $ObjConfigFreeIPA.Salt
              $KeyBytes  = $Rfc2898Deriver.GetBytes(32)
              $SecStringPass = ConvertTo-SecureString -Key $KeyBytes $ObjConfigFreeIPA.EncryptedAdminSecret
              $SecStringLogin = ConvertTo-SecureString -Key $KeyBytes $ObjConfigFreeIPA.EncryptedAdminAccount
              $global:FreeIPAAPICredentials = @{
                  user = $SecStringLogin
                  password = $SecStringPass
              }
          } catch {
              write-warning "Not able to set correctly your credential, your passphrase my be incorrect"
              write-verbose -message "Error Type: $($_.Exception.GetType().FullName)"
              write-verbose -message "Error Message: $($_.Exception.Message)"
          }
      }
  }
Function Set-FreeIPAAPIServerConfig {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory=$false,ValueFromPipelineByPropertyName=$true)]
        [ValidateScript({$_ -match "(http[s]?)(:\/\/)([^\s,]+)"})]
            [String]$URL,
        [parameter(Mandatory=$false)]
        [ValidateNotNullOrEmpty()]
            [String]$ClientVersion
    )
    process {
        if ($URL) {
            $global:FreeIPAAPIServerConfig = @{
                ServerURL = $URL
            }
        } else {
            $global:FreeIPAAPIServerConfig = @{
                ServerURL = "%jsonrpc_uri%"
            }
        }
        if ($ClientVersion) {
            $global:FreeIPAAPIServerConfig.add('ClientVersion',$ClientVersion)
        } else {
            $global:FreeIPAAPIServerConfig.add('ClientVersion',"%api_version%")
        }
    }
  }
Function Get-FreeIPAAPIAuthenticationCookie {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory=$false,ValueFromPipelineByPropertyName=$true)]
        [ValidateScript({$_ -match "(http[s]?)(:\/\/)([^\s,]+)"})]
            [String]$URL,
        [parameter(Mandatory=$false)]
        [ValidateNotNullOrEmpty()]
            [SecureString]$AdminLogin,
        [parameter(Mandatory=$false)]
        [ValidateNotNullOrEmpty()]
            [SecureString]$AdminPassword,
        [parameter(Mandatory=$false)]
            [switch]$UseCachedURLandCredentials,
        [parameter(Mandatory=$false)]
            [switch]$CloseAllRemoteSession
    )
    if ($CloseAllRemoteSession.IsPresent) {
        Invoke-FreeIPAAPISessionLogout
    } else {
        if (!($UseCachedURLandCredentials.IsPresent)) {
            if ($URL -and $AdminLogin -and $AdminPassword) {
                $global:FreeIPAAPICredentials = @{
                    user = $AdminLogin
                    password = $AdminPassword
                }
                Set-FreeIPAAPIServerConfig -URL $URL

            } else {
                write-warning "if UseCachedURLandCredentials switch is not used URL, AdminLogin, AdminPassword parameters must be used"
                throw 'AdminLogin, AdminPassword parameters must be used'
            }
        }
        try {
            $SecureStringPassToBSTR = [Runtime.InteropServices.Marshal]::SecureStringToBSTR($global:FreeIPAAPICredentials.password)
            $SecureStringLoginToBSTR = [Runtime.InteropServices.Marshal]::SecureStringToBSTR($global:FreeIPAAPICredentials.user)
            $BSTRCredentials = @{
                user = [Runtime.InteropServices.Marshal]::PtrToStringAuto($SecureStringLoginToBSTR)
                password = [Runtime.InteropServices.Marshal]::PtrToStringAuto($SecureStringPassToBSTR) 
            }            
            if ($global:FreeIPAProxyParams) {
			  $params = $global:FreeIPAProxyParams.clone()
			  if (!$params.UseBasicParsing){$params.add('UseBasicParsing', $true)}
		    } Else {
			  $params = @{}
			  $params.add('UseBasicParsing', $true)
		    }
            $params.add('URI', "$($global:FreeIPAAPIServerConfig.ServerURL)/ipa/session/login_password")
            $params.add('Session', 'FunctionFreeIPASession')
            $params.add('Body',$BSTRCredentials)
            $params.add('Method','POST')
            $FreeIPALogin = Invoke-WebRequest @params
        } catch {
            write-verbose -message "Error Type: $($_.Exception.GetType().FullName)"
			write-verbose -message "Error Message: $($_.Exception.Message)"
			write-verbose -message "HTTP error code:$($_.Exception.Response.StatusCode.Value__)"
			write-verbose -message "HTTP error message:$($_.Exception.Response.StatusDescription)"
            $PSCmdlet.ThrowTerminatingError($PSitem)
        } 
        $global:FreeIPASession = $FunctionFreeIPASession
        $FreeIPALogin
    }
}
Function Invoke-FreeIPAAPI {
    [CmdletBinding()]
    [OutputType([psobject])]
    param (
        [Parameter(Mandatory=$true,ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNullOrEmpty()]
            [Object]$inputAPIObject
    )
    begin {
        If (!(get-variable FreeIPASession)) {
            throw "Please use Get-FreeIPAAPIAuthenticationCookie function first to get an authentication cookie"
        }
    } process {
        try {
            $json = $inputAPIObject | ConvertTo-Json -Depth 3
            Write-Verbose -message $json
        } catch {
            write-error -message "Not able to convert input object to json"
        }
        try {
            if ($json) {
              if ($global:FreeIPAProxyParams) {
			  $params = $global:FreeIPAProxyParams.clone()
			  if (!$params.UseBasicParsing){$params.add('UseBasicParsing', $true)}
		      } Else {
			    $params = @{}
			    $params.add('UseBasicParsing', $true)
		      }
              $params.add('URI', "$($global:FreeIPAAPIServerConfig.ServerURL)/ipa/session/json")
              $params.add('WebSession', $global:FreeIPASession)
              $params.add('Body',$json)
              $params.add('Method','POST')
              $params.add('ContentType','application/json')
              $params.add('Headers',@{"Referer"="$($global:FreeIPAAPIServerConfig.ServerURL)/ipa/session/json"})
                Invoke-RestMethod @params
            }            
        } catch {
            write-verbose -message "Error Type: $($_.Exception.GetType().FullName)"
			write-verbose -message "Error Message: $($_.Exception.Message)"
			write-verbose -message "HTTP error code:$($_.Exception.Response.StatusCode.Value__)"
			write-verbose -message "HTTP error message:$($_.Exception.Response.StatusDescription)"
            $PSCmdlet.ThrowTerminatingError($PSitem)
        }
    }
}
Function Set-FreeIPAProxy {
	<#
	  .SYNOPSIS 
	  Set an internet proxy to use FreeIPA web api
  
	  .DESCRIPTION
	  Set an internet proxy to use FreeIPA web api

	  .PARAMETER DirectNoProxy
	  -DirectNoProxy
	  Remove proxy and configure FreeIPA powershell functions to use a direct connection
	
	  .PARAMETER Proxy
	  -Proxy{Proxy}
	  Set the proxy URL

	  .PARAMETER ProxyCredential
	  -ProxyCredential{ProxyCredential}
	  Set the proxy credential to be authenticated with the internet proxy set

	  .PARAMETER ProxyUseDefaultCredentials
	  -ProxyUseDefaultCredentials
	  Use current security context to be authenticated with the internet proxy set

	  .PARAMETER AnonymousProxy
	  -AnonymousProxy
	  No authentication (open proxy) with the internet proxy set

	  .OUTPUTS
	  none
	  
	  .EXAMPLE
	  Remove Internet Proxy and set a direct connection
	  C:\PS> Set-FreeIPAProxy -DirectNoProxy

	  .EXAMPLE
	  Set Internet Proxy and with manual authentication
	  $credentials = get-credential 
	  C:\PS> Set-FreeIPAProxy -Proxy "http://myproxy:8080" -ProxyCredential $credentials

	  .EXAMPLE
	  Set Internet Proxy and with automatic authentication based on current security context
	  C:\PS> Set-FreeIPAProxy -Proxy "http://myproxy:8080" -ProxyUseDefaultCredentials

	  .EXAMPLE
	  Set Internet Proxy and with no authentication 
	  C:\PS> Set-FreeIPAProxy -Proxy "http://myproxy:8080" -AnonymousProxy
	#>
	[cmdletbinding()]
	Param (
	  [Parameter(Mandatory=$false,ValueFromPipelineByPropertyName=$false)]
		  [switch]$DirectNoProxy,
	  [Parameter(Mandatory=$false,ValueFromPipelineByPropertyName=$true)]
          [ValidateScript({$_ -match "(http[s]?)(:\/\/)([^\s,]+)"})]
	      [string]$Proxy,
	  [Parameter(Mandatory=$false,ValueFromPipelineByPropertyName=$false)]
	      [Management.Automation.PSCredential]$ProxyCredential,
	  [Parameter(Mandatory=$false,ValueFromPipelineByPropertyName=$false)]
		  [Switch]$ProxyUseDefaultCredentials,
	  [Parameter(Mandatory=$false,ValueFromPipelineByPropertyName=$false)]
		  [Switch]$AnonymousProxy
	)
	if ($DirectNoProxy.IsPresent){
		$global:FreeIPAProxyParams = $null
	} ElseIf ($Proxy) {
		$global:FreeIPAProxyParams = @{}
		$FreeIPAProxyParams.Add('Proxy', $Proxy)
		if ($ProxyCredential){
			$FreeIPAProxyParams.Add('ProxyCredential', $ProxyCredential)
			If ($FreeIPAProxyParams.ProxyUseDefaultCredentials) {$FreeIPAProxyParams.Remove('ProxyUseDefaultCredentials')}
		} Elseif ($ProxyUseDefaultCredentials.IsPresent){
			$FreeIPAProxyParams.Add('ProxyUseDefaultCredentials', $ProxyUseDefaultCredentials)
			If ($FreeIPAProxyParams.ProxyCredential) {$FreeIPAProxyParams.Remove('ProxyCredential')}
		} ElseIf ($AnonymousProxy.IsPresent) {
			If ($FreeIPAProxyParams.ProxyUseDefaultCredentials) {$FreeIPAProxyParams.Remove('ProxyUseDefaultCredentials')}
			If ($FreeIPAProxyParams.ProxyCredential) {$FreeIPAProxyParams.Remove('ProxyCredential')}
		}
	}
}
